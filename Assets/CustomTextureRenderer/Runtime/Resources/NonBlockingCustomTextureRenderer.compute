#pragma kernel LoadRawTextureDataRGBA32

#define NUM_THREADS_X 16
#define NUM_THREADS_Y 16

StructuredBuffer<uint> RawTextureData;
RWTexture2D<float4> OutputTexture;

cbuffer params
{
    uint Width;
    uint Height;
};

bool IsValidPixelPosition(uint2 p, uint width, uint height)
{
    return (p.x >= 0 && p.x < width && p.y >= 0 && p.y < height);
}

[numthreads(NUM_THREADS_X, NUM_THREADS_Y, 1)]
void LoadRawTextureDataRGBA32 (uint2 id : SV_DispatchThreadID)
{
    if (!IsValidPixelPosition(id, Width, Height)) { return; }

    int index = id.y * Width + id.x;
    int pixel = RawTextureData[index];

    float red   =  (pixel & 0x000000ff) / 255.0;
    float green = ((pixel & 0x0000ff00) >> 8)  / 255.0;
    float blue  = ((pixel & 0x00ff0000) >> 16) / 255.0;
    float alpha = ((pixel & 0xff000000) >> 24) / 255.0;

    OutputTexture[id.xy] = float4(red, green, blue, alpha);
}